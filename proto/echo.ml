(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
   Source: echo.proto
   Syntax: proto3 
   Parameters:
     annot=''
     debug=false
     opens=[]
     int64_as_int=true
     int32_as_int=true
     fixed_as_int=false
     singleton_record=false
*)
module Grpc = struct
  module Gateway = struct
    module Testing = struct
      module rec Empty : sig
        val name': unit -> string
        type t = unit 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.Empty"
        type t = unit 
        let to_proto = 
          let apply = fun ~f () -> f in
          let spec = Ocaml_protoc_plugin.Serialize.C.( nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = () in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and EchoRequest : sig
        val name': unit -> string
        type t = string 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.EchoRequest"
        type t = string 
        let to_proto = 
          let apply = fun ~f a -> f a in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun a -> a in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and EchoResponse : sig
        val name': unit -> string
        type t = { message: string; message_count: int } 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.EchoResponse"
        type t = { message: string; message_count: int } 
        let to_proto = 
          let apply = fun ~f:f' { message; message_count } -> f' message message_count in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, string, proto3) ^:: basic (2, int32_int, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun message message_count -> { message; message_count } in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, string, proto3) ^:: basic (2, int32_int, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and ServerStreamingEchoRequest : sig
        val name': unit -> string
        type t = { message: string; message_count: int; message_interval: int } 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.ServerStreamingEchoRequest"
        type t = { message: string; message_count: int; message_interval: int } 
        let to_proto = 
          let apply = fun ~f:f' { message; message_count; message_interval } -> f' message message_count message_interval in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, string, proto3) ^:: basic (2, int32_int, proto3) ^:: basic (3, int32_int, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun message message_count message_interval -> { message; message_count; message_interval } in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, string, proto3) ^:: basic (2, int32_int, proto3) ^:: basic (3, int32_int, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and ServerStreamingEchoResponse : sig
        val name': unit -> string
        type t = string 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.ServerStreamingEchoResponse"
        type t = string 
        let to_proto = 
          let apply = fun ~f a -> f a in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun a -> a in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and ClientStreamingEchoRequest : sig
        val name': unit -> string
        type t = string 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.ClientStreamingEchoRequest"
        type t = string 
        let to_proto = 
          let apply = fun ~f a -> f a in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun a -> a in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      and ClientStreamingEchoResponse : sig
        val name': unit -> string
        type t = int 
        val to_proto: t -> Ocaml_protoc_plugin.Writer.t
        val from_proto: Ocaml_protoc_plugin.Reader.t -> t Ocaml_protoc_plugin.Result.t
      end = struct 
        let name' () = "Echo.grpc.gateway.testing.ClientStreamingEchoResponse"
        type t = int 
        let to_proto = 
          let apply = fun ~f a -> f a in
          let spec = Ocaml_protoc_plugin.Serialize.C.( basic (1, int32_int, proto3) ^:: nil ) in
          let serialize = Ocaml_protoc_plugin.Serialize.serialize (spec) in
          fun t -> apply ~f:(serialize ()) t
        
        let from_proto = 
          let constructor = fun a -> a in
          let spec = Ocaml_protoc_plugin.Deserialize.C.( basic (1, int32_int, proto3) ^:: nil ) in
          let deserialize = Ocaml_protoc_plugin.Deserialize.deserialize (spec) constructor in
          fun writer -> deserialize writer
        
      end
      module EchoService = struct
        let echo = 
          ( (module EchoRequest : Ocaml_protoc_plugin.Service.Message with type t = EchoRequest.t ), 
          (module EchoResponse : Ocaml_protoc_plugin.Service.Message with type t = EchoResponse.t ) ) 
      end
    end
  end
end