(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
  Source: src/helloworld.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot=''
    opens=[]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
*)

open Ocamlprotocplugin.Runtime [@@warning "-33"]
module Helloworld = struct
  module rec HelloRequest : sig
    val name': unit -> string
    type t = string 
    val make : ?name:string -> unit -> t
    val to_proto: t -> Runtime'.Writer.t
    val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
  end = struct 
    let name' () = "helloworld.helloworld.HelloRequest"
    type t = string
    let make =
      fun ?name () -> 
      let name = match name with Some v -> v | None -> {||} in
      name
    
    let to_proto =
      let apply = fun ~f:f' name -> f' [] name in
      let spec = Runtime'.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
      let serialize = Runtime'.Serialize.serialize [] (spec) in
      fun t -> apply ~f:serialize t
    
    let from_proto =
      let constructor = fun _extensions name -> name in
      let spec = Runtime'.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
    
  end
  and HelloReply : sig
    val name': unit -> string
    type t = string 
    val make : ?message:string -> unit -> t
    val to_proto: t -> Runtime'.Writer.t
    val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
  end = struct 
    let name' () = "helloworld.helloworld.HelloReply"
    type t = string
    let make =
      fun ?message () -> 
      let message = match message with Some v -> v | None -> {||} in
      message
    
    let to_proto =
      let apply = fun ~f:f' message -> f' [] message in
      let spec = Runtime'.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
      let serialize = Runtime'.Serialize.serialize [] (spec) in
      fun t -> apply ~f:serialize t
    
    let from_proto =
      let constructor = fun _extensions message -> message in
      let spec = Runtime'.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
    
  end
  module Greeter = struct
    let sayHello = 
      ( (module HelloRequest : Runtime'.Service.Message with type t = HelloRequest.t ), 
      (module HelloReply : Runtime'.Service.Message with type t = HelloReply.t ) ) 
  end
end